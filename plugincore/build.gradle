apply plugin: 'com.android.library'

def hiddenapi = project(':hiddenapistubs')

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    hiddenapi.afterEvaluate {
        hiddenapi.android.compileSdkVersion compileSdkVersion
        hiddenapi.android.buildToolsVersion buildToolsVersion
        preBuild.dependsOn hiddenapi.assembleDebug
        hiddenapi.preBuild << {
            def hiddenapiCompiler = hiddenapi.android.libraryVariants[0].javaCompiler
            def hiddenapiDestPath = hiddenapiCompiler.destinationDir.getAbsolutePath()
            android.libraryVariants.all { variant ->
                variant.javaCompiler.with {
                    dependsOn hiddenapiCompiler
                    options.bootClasspath = hiddenapiDestPath + File.pathSeparator + options.bootClasspath
                }
            }

        }
    }
}

task fixIml(dependsOn:hiddenapi.getTasksByName("preBuild",false)) {
    ext.imlFile = projectDir.absolutePath + '/' + project.name + '.iml'
    inputs.file imlFile
    outputs.file imlFile

    doLast {
        if (!file(imlFile).exists())
            return

        // Parse the existing iml file
        def parse = new XmlParser().parse(imlFile)
        def moduleComponent = parse.component.find { it.@name == 'NewModuleRootManager' }

        // Check if it has already been fixed
        def orderEntries = moduleComponent.orderEntry
        if (orderEntries.find { it.@type == 'module' && it.@'module-name' == 'hiddenapistubs' })
            return

        // Determine the index of the Android SDK entry
        def jdkOrderEntry = orderEntries.find { it.@type == 'jdk' }
        def jdkOrderEntryIndex = moduleComponent.children().indexOf(jdkOrderEntry)

        // Add the new entry just before it
        moduleComponent.children().add(jdkOrderEntryIndex, new Node(null, 'orderEntry',
                ['type': 'module', 'module-name': 'hiddenapistubs', 'exported': '']))

        // Write the fixed iml file
        def printer = new XmlNodePrinter(new PrintWriter(new FileWriter(imlFile)))
        printer.preserveWhitespace = true
        printer.print(parse)
    }
}


tasks.preBuild.dependsOn fixIml
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:24.2.0'
    compile 'io.realm:realm-android:0.87.4'
}
